<?php

namespace {{ namespace }};

use Inium\Mvcs\Common\Mapper\ModelMapper;
use Inium\Mvcs\Common\Traits\ArrayTrait;
use Inium\Mvcs\Common\Dto\PageDto;
use Inium\Mvcs\Common\Dto\PageMetaDto;
use {{ repositoryInterfaceNamespace }}\{{ repositoryInterfaceClass }};
use {{ serviceInterfaceNamespace }}\{{ serviceInterfaceClass }};
use {{ contentDtoNamespace }}\{{ contentDtoClass }};
use {{ createDtoNamespace }}\{{ createDtoClass }};
use {{ updateDtoNamespace }}\{{ updateDtoClass }};

class {{ class }} implements {{ serviceInterfaceClass }}
{
    use ArrayTrait;

    /**
     * Repository
     *
     * @var {{ repositoryInterfaceClass }}
     */
    private {{ repositoryInterfaceClass }} $repository;

    /**
     * Model Mapper
     *
     * @var ModelMapper
     */
    private ModelMapper $mapper;

    /**
     * Constructor
     *
     * @param {{ repositoryInterfaceClass }} $repository
     */
    public function __construct(
        {{ repositoryInterfaceClass }} $repository,
        ModelMapper $mapper
    ) {
        $this->repository = $repository;
        $this->mapper = $mapper;
    }

    /**
     * {@inheritDoc}
     */
    public function find(string $query, int $page, int $rows): PageDto
    {
        $ret = $this->repository->find($query, $page, $rows);

        $data = collect($ret["data"])->map(
            fn($item) => $this->mapper->map(
                $this->keysToCamel($item),
                {{ contentDtoClass }}::class
            )
        );

        return $this->mapper->map(
            [
                "data" => $data->toArray(),
                "meta" => PageMetaDto::fromArray($this->keysToCamel($ret)),
            ],
            PageDto::class
        );
    }

    /**
     * {@inheritDoc}
     */
    public function findById(int $id): {{ contentDtoClass }}
    {
        $ret = $this->repository->findById($id);

        return $this->mapper->map(
            $this->keysToCamel($ret),
            {{ contentDtoClass }}::class
        );
    }

    /**
     * {@inheritDoc}
     */
    public function create({{ createDtoClass }} $dto): {{ contentDtoClass }}
    {
        $ret = $this->repository->create(
            $this->keysToSnake($dto->jsonSerialize())
        );

        return $this->mapper->map(
            $this->keysToCamel($ret),
            {{ contentDtoClass }}::class
        );
    }

    /**
     * {@inheritDoc}
     */
    public function update({{ updateDtoClass }} $dto, int $id): int
    {
        return $this->repository->update(
            $this->keysToSnake($dto->jsonSerialize()),
            $id
        );
    }

    /**
     * {@inheritDoc}
     */
    public function deleteById(int $id): int
    {
        return $this->repository->deleteById($id);
    }
}