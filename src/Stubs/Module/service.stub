<?php

namespace {{ namespace }};

use Inium\Multier\Common\Mapper\ModelMapper;
use Inium\Multier\Common\Base\Dto\PageDto;
use Inium\Multier\Common\Traits\ArrayTrait;
use {{ repositoryInterfaceNamespace }}\{{ repositoryInterfaceClass }};
use {{ serviceInterfaceNamespace }}\{{ serviceInterfaceClass }};
use {{ contentDtoNamespace }}\{{ contentDtoClass }};
use {{ createDtoNamespace }}\{{ createDtoClass }};
use {{ updateDtoNamespace }}\{{ updateDtoClass }};

class {{ class }} implements {{ serviceInterfaceClass }}
{
    use ArrayTrait;

    /**
     * Repository
     *
     * @var {{ repositoryInterfaceClass }}
     */
    private {{ repositoryInterfaceClass }} $repository;

    /**
     * Model Mapper
     *
     * @var ModelMapper
     */
    private ModelMapper $mapper;

    /**
     * Constructor
     *
     * @param {{ repositoryInterfaceClass }} $repository
     */
    public function __construct(
        {{ repositoryInterfaceClass }} $repository,
        ModelMapper $mapper
    ) {
        $this->repository = $repository;
        $this->mapper = $mapper;
    }

    /**
     * {@inheritDoc}
     */
    public function find(int $page, int $rows, ?string $query): PageDto
    {
        try {
            $coll = is_null($query)
                ? $this->repository->paginate($page, $rows)
                : $this->repository->find($query, $page, $rows);

            $items = $coll->map(function ($entity) {
                return $this->mapper->map(
                    $this->arrayKeysToCamel($entity->toArray()),
                    {{ contentDtoClass }}::class
                );
            });

            return new PageDto(
                $items->toArray(),
                $coll->total(),
                $coll->currentPage(),
                $coll->lastPage(),
                $coll->perPage()
            );
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    /**
     * {@inheritDoc}
     */
    public function findById(int $id): {{ contentDtoClass }}
    {
        try {
            $entity = $this->repository->findById($id);

            return $this->mapper->map(
                $this->arrayKeysToCamel($entity->toArray()),
                {{ contentDtoClass }}::class
            );
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    /**
     * {@inheritDoc}
     */
    public function create({{ createDtoClass }} $dto): {{ contentDtoClass }}
    {
        try {
            $entity = $this->repository->create(
                $this->arrayKeysToSnake($dto->jsonSerialize())
            );

            return $this->mapper->map(
                $this->arrayKeysToCamel($entity->toArray()),
                {{ contentDtoClass }}::class
            );

        } catch (\Throwable $th) {
            throw $th;
        }
    }

    /**
     * {@inheritDoc}
     */
    public function update({{ updateDtoClass }} $dto, int $id): int
    {
        try {
            return $this->repository->update(
                $this->arrayKeysToSnake($dto->jsonSerialize()),
                $id
            );
        } catch (\Throwable $th) {
            throw $th;
        }
    }

    /**
     * {@inheritDoc}
     */
    public function deleteById(int $id): int
    {
        try {
            return $this->repository->deleteById($id);
        } catch (\Throwable $th) {
            throw $th;
        }
    }
}